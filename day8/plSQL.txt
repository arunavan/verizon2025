DELIMITER $$
CREATE PROCEDURE GetAllEmployees()
BEGIN
    SELECT * FROM emp ;
END $$
DELIMITER ;

CALL GetAllEmployees();
EXEC GetAllEmployees();




DELIMITER $$
CREATE PROCEDURE GetEmployeeById(IN emp_id INT)
BEGIN
    SELECT * FROM emp WHERE id = emp_id;
END $$
DELIMITER ;

CALL GetEmployeeById(101);



DELIMITER $$
CREATE  PROCEDURE GetEmployeeNameById(IN emp_id INT, OUT emp_name VARCHAR(100))
BEGIN
    SELECT name INTO emp_name FROM emp WHERE id = emp_id;

END $$
DELIMITER ;
CALL GetEmployeeNameById(101, @name);
SELECT @name;


DELIMITER $$
CREATE PROCEDURE PrintNumbers()
BEGIN
    DECLARE counter INT DEFAULT 1;
      WHILE counter <= 5 DO
        SELECT counter;
        SET counter = counter + 1;
    END WHILE;
END $$
DELIMITER ;
CALL PrintNumbers();


DELIMITER $$
CREATE PROCEDURE CheckSalary(IN salary INT, OUT category VARCHAR(20))
BEGIN
    IF salary < 40000 THEN
        SET category = 'Low';
    ELSEIF salary BETWEEN 40000 AND 60000 THEN
        SET category = 'Medium';
    ELSE
        SET category = 'High';
    END IF;
END $$
DELIMITER ;
CALL CheckSalary(70000, @result);
SELECT @result;


Sequence:

SQL> create sequence s1 start with 10 increment by 1  MAXVALUE 100 cycle;

Sequence created.

SQL> select s1.nextval from dual;

   NEXTVAL
----------
        10





// sequence not supported in MySQL- AUTO INCREMENT

CREATE TABLE employees (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100)
);

INSERT INTO employees (name) VALUES ('John'), ('Alice'), ('Bob');

SELECT * FROM employees;



cursor:


DELIMITER $$
CREATE PROCEDURE FetchEmployeeNames()
BEGIN
    DECLARE done INT DEFAULT 0;
    DECLARE emp_name VARCHAR(100);
    DECLARE cur CURSOR FOR SELECT name FROM emp;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;
    OPEN cur;
    read_loop: LOOP
        FETCH cur INTO emp_name;
        IF done = 1 THEN
            LEAVE read_loop;
        END IF;
        SELECT emp_name;
    END LOOP;
    CLOSE cur;
END $$
DELIMITER ;

CALL FetchEmployeeNames();

//if sql safe is locked and update

SET SQL_SAFE_UPDATES = 0;


Triggers:
=================
DELIMITER $$
CREATE TRIGGER BeforeSalaryUpdate
BEFORE/after  insert/delete/UPDATE ON emp
FOR EACH ROW
BEGIN
    INSERT INTO salary_log(employee_id, old_salary, new_salary, change_date)
    VALUES (OLD.id, OLD.salary, NEW.salary, NOW());
END $$
DELIMITER ;



Function:
=================
DELIMITER $$
CREATE FUNCTION CalculateBonus(salary DECIMAL(10,2)) RETURNS DECIMAL(10,2)
DETERMINISTIC
BEGIN
    DECLARE bonus DECIMAL(10,2);
    SET bonus = salary * 0.1;
    RETURN bonus;
END $$
DELIMITER ;

SELECT CalculateBonus(5000);


create index titleindex on bookinfo5(title);
DELIMITER $$
CREATE PROCEDURE getBooks2(in id int,out currentTime1 DATETIME,out currentTime2 DATETIME)
BEGIN
set currentTime1=now();
select * from bookinfo5 where bid=id;
set currentTime2=now();
END $$
DELIMITER ;
call getBooks2(20,@t1,@t2);
select @t1,@t2;

